#!/sbin/sh
# AnyKernel2 Backend
# osm0sis @ xda-developers
# kraatus90 @ xda-developers

# Main variables
OUTFD=/proc/self/fd/$2;
ZIP="$3";
DIR=`dirname "$ZIP"`;

# Methods
ui_print() {
	until [ ! "$1" ]; do
		echo -e "ui_print $1\nui_print" > $OUTFD;
    	shift;
	done;
}

show_progress() { 
	echo "progress $1 $2" > $OUTFD; 
}

set_perm_recursive() {
	dirs=$(echo $* | awk '{ print substr($0, index($0,$5)) }');
	for i in $dirs; do
		chown -R $1.$2 $i; chown -R $1:$2 $i;
		find "$i" -type d -exec chmod $3 {} +;
		find "$i" -type f -exec chmod $4 {} +;
	done;
}

file_getprop() {
	grep "^$2" "$1" | cut -d= -f2; 
}

getprop() { 
	test -e /sbin/getprop && /sbin/getprop $1 || file_getprop /default.prop $1; 
}

abort() { 
	ui_print "$*";
	exit 1; 
}

# Start...
show_progress 1.34 4;
ui_print " ";
mkdir -p /tmp/anykernel/bin;
cd /tmp/anykernel;
unzip -o $ZIP;
if [ $? != 0 -o -z "$(ls /tmp/anykernel/tools)" ]; then
  abort "Unzip failed. Aborting...";
fi;


ui_print "***************************************************";
ui_print "* Krait-kernel by kraatus90 @ XDA-Developers";
ui_print "* Moto X 2014 (Victara)";
ui_print "* Version: `cat /tmp/anykernel/version.txt`";
ui_print "***************************************************";

# Mount /system
ui_print " ";
ui_print "Mounting system...";
busybox mount /system;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.devicecheck)" == 1 ]; then
  ui_print "Checking device...";
  for i in 1 2 3 4 5; do
    victara="$(file_getprop /tmp/anykernel/anykernel.sh device.name$i)";
    if [ "$(getprop ro.product.device)" == "$victara" -o "$(getprop ro.build.product)" == "$victara" ]; then
      ui_print "$victara";
      match=1;
    fi;
  done;
  ui_print " ";
  if [ "$match" != 1 ]; then
    abort "Unsupported device. Aborting...";
  fi;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.initd)" == 1 ]; then
  ui_print "Creating init.d...";
  ui_print " ";
  mount -o remount,rw /system;
  mkdir /system/etc/init.d;
  set_perm_recursive 0 0 0755 0755 /system/etc/init.d;
  mount -o remount,rw /system;
fi;

# Flash  kernel 
ui_print "Installing kernel...";
chmod -R 755 /tmp/anykernel/tools /tmp/anykernel/bin;
bb=/tmp/anykernel/tools/busybox;
for i in $($bb --list); do
  ln -s $bb /tmp/anykernel/bin/$i;
done;
PATH="/tmp/anykernel/bin:$PATH" $bb ash /tmp/anykernel/anykernel.sh $2;
if [ $? != "0" ]; then
  abort;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.modules)" == 1 ]; then
# Remove all old modules
ui_print "Removing all old modules...";
# Only remove the modules if /system/lib/modules exists
if [ -d /system/lib/modules ]; then
	rm -rf /system/lib/modules/*;
fi;
# Copy the new modules
ui_print "Pushing new modules..."
  mount -o remount,rw /system;
  cp -rf /tmp/anykernel/modules/* /system/lib/modules/;
# Symlink pronto_wlan.ko to wlan.ko
ln -fs /system/lib/modules/pronto/pronto_wlan.ko /system/lib/modules/wlan.ko;
  set_perm_recursive 0 0 0755 0644 /system/lib/modules;
  mount -o remount,rw /system;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanup)" == 1 ]; then
  rm -rf /tmp/anykernel;
fi;

# Newline
ui_print " ";

# Newline
ui_print " ";

# disable mpdecision if enabled
if [ -e /system/bin/mpdecision ]; then
	ui_print "Disabling MPDecision...\n";
	[ -e /system/bin/mpdecisionbak ] || cp /system/bin/mpdecision /system/bin/mpdecisionbak;
	[ -e /system/bin/mpdecision ] && rm -f /system/bin/mpdecision;
else
	ui_print "MPDecision already disabled";
fi;

# disable powerHal if enabled
if [ -e /system/lib/hw/power.msm8974.so ]; then
	ui_print "Disabling powerHal...\n";
	[ -e /system/lib/hw/power.msm8974.so.bak ] || cp /system/lib/hw/power.msm8974.so /system/lib/hw/power.msm8974.so.bak;
	[ -e /system/lib/hw/power.msm8974.so ] && rm -f /system/lib/hw/power.msm8974.so;
else
	ui_print "powerHal already disabled";
fi;

umount /system;
umount /data;
ui_print " ";
ui_print "Done!";

